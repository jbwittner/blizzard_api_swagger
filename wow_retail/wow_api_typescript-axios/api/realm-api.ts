/* tslint:disable */
/* eslint-disable */
/**
 * Swagger BLIZZARD Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.1
 * Contact: jeanbaptiste.wittner@outlook.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArrayRealmsIndexData } from '../model';
// @ts-ignore
import { RealmData } from '../model';
/**
 * RealmApi - axios parameter creator
 * @export
 */
export const RealmApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single realm by slug or ID.
         * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
         * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
         * @param {string} realmSlug The slug of the realm.
         * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealmBySlug: async (namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', realmSlug: string, locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('getRealmBySlug', 'namespace', namespace)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('getRealmBySlug', 'region', region)
            // verify required parameter 'realmSlug' is not null or undefined
            assertParamExists('getRealmBySlug', 'realmSlug', realmSlug)
            const localVarPath = `/data/wow/realm/{realmSlug}`
                .replace(`{${"realmSlug"}}`, encodeURIComponent(String(realmSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuthAuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuthAuthorizationCode", ["wow.profile"], configuration)

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an index of realms.
         * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
         * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
         * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealmIndex: async (namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('getRealmIndex', 'namespace', namespace)
            // verify required parameter 'region' is not null or undefined
            assertParamExists('getRealmIndex', 'region', region)
            const localVarPath = `/data/wow/realm/index`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuthAuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuthAuthorizationCode", ["wow.profile"], configuration)

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RealmApi - functional programming interface
 * @export
 */
export const RealmApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RealmApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single realm by slug or ID.
         * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
         * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
         * @param {string} realmSlug The slug of the realm.
         * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRealmBySlug(namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', realmSlug: string, locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealmData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRealmBySlug(namespace, region, realmSlug, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an index of realms.
         * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
         * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
         * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRealmIndex(namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArrayRealmsIndexData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRealmIndex(namespace, region, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RealmApi - factory interface
 * @export
 */
export const RealmApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RealmApiFp(configuration)
    return {
        /**
         * Returns a single realm by slug or ID.
         * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
         * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
         * @param {string} realmSlug The slug of the realm.
         * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealmBySlug(namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', realmSlug: string, locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options?: any): AxiosPromise<RealmData> {
            return localVarFp.getRealmBySlug(namespace, region, realmSlug, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an index of realms.
         * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
         * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
         * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealmIndex(namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options?: any): AxiosPromise<ArrayRealmsIndexData> {
            return localVarFp.getRealmIndex(namespace, region, locale, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RealmApi - interface
 * @export
 * @interface RealmApi
 */
export interface RealmApiInterface {
    /**
     * Returns a single realm by slug or ID.
     * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
     * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
     * @param {string} realmSlug The slug of the realm.
     * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmApiInterface
     */
    getRealmBySlug(namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', realmSlug: string, locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options?: AxiosRequestConfig): AxiosPromise<RealmData>;

    /**
     * Returns an index of realms.
     * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
     * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
     * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmApiInterface
     */
    getRealmIndex(namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options?: AxiosRequestConfig): AxiosPromise<ArrayRealmsIndexData>;

}

/**
 * RealmApi - object-oriented interface
 * @export
 * @class RealmApi
 * @extends {BaseAPI}
 */
export class RealmApi extends BaseAPI implements RealmApiInterface {
    /**
     * Returns a single realm by slug or ID.
     * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
     * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
     * @param {string} realmSlug The slug of the realm.
     * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmApi
     */
    public getRealmBySlug(namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', realmSlug: string, locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options?: AxiosRequestConfig) {
        return RealmApiFp(this.configuration).getRealmBySlug(namespace, region, realmSlug, locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an index of realms.
     * @param {'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn'} namespace The namespace to use to locate this document.
     * @param {'eu' | 'us' | 'kr' | 'tw' | 'cn'} region The region of the data to retrieve.
     * @param {'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN'} [locale] The locale to reflect in localized data. (If you don\&#39;t send a value, the API sends you all localized data)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealmApi
     */
    public getRealmIndex(namespace: 'dynamic-eu' | 'dynamic-us' | 'dynamic-kr' | 'dynamic-tw' | 'dynamic-cn', region: 'eu' | 'us' | 'kr' | 'tw' | 'cn', locale?: 'en_US' | 'es_MX' | 'pt_BR' | 'de_DE' | 'en_GB' | 'es_ES' | 'fr_FR' | 'it_IT' | 'ru_RU' | 'ko_KR' | 'zh_TW' | 'zh_CN', options?: AxiosRequestConfig) {
        return RealmApiFp(this.configuration).getRealmIndex(namespace, region, locale, options).then((request) => request(this.axios, this.basePath));
    }
}
